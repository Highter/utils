Socket通信
TCP协议是面向连接的，可靠的，有序的，以字节流的方式发送数据
基于TCP协议实现网络通信的类
客户端的Socket类
服务端的ServerSocket类
Socket通信模型

基于TCP协议实现网络通信的类：
客户端的Socket类、服务器端的ServerSocket类

ServerSocket常用方法：
ServerSocket(int port)——创建并绑定到特定端口的服务器套接字
accept()——侦听并接受到此套接字的连接
close()——关闭此套接字
getInetAddress()——得到ServerSocket对象绑定的IP地址。如果ServerSocket对象未绑定IP地址，返回0.0.0.0。
getLocalPort()——返回此套接字在其上侦听的端口

Socket常用方法：
Socket(InetAddress address, int port)——创建一个套接字并将其连接到指定ip地址的指定端口号
Socket(String host, int port)——创建一个套接字并将其连接到指定主机上的指定端口号
close()——关闭此套接字
getInetAddress()——返回套接字连接的地址
getInputStream()——返回此套接字的输入流
getOutputStream——返回此套接字的输出流

Socket通信模型：
建立连接：在服务端建立一个ServerSocket，绑定相应的端口，并且在指定的端口进行侦听，等待客户端的连接。在客户端创建Socket，并向服务器端发送请求。服务器收到请求，并且接受客户端的请求信息。接受请求后，创建连接Socket，用来与客户端的Socket进行通信。
开始通信：通过相应的输入输出流，进行相应的数据交换、发送、接收、响应。
结束通信：关闭两端的Socket。

Socket通信实现步骤：
服务器端：
1.创建ServerSocket对象，绑定监听端口
2.通过accept()方法监听客户端请求
3.连接建立后，通过输入流读取客户端发送的请求信息
4.通过输出流向客户端发送响应信息
5.关闭相关资源

客户端：
1.创建Socket对象，指明需要连接的服务器的地址和端口号
2.连接建立后，通过输出流向服务器端发送请求信息
3.通过输入流获取服务器响应的信息
4.关闭相关资源

--------------------------------------------
特点：UDP协议是无连接，无状态，无序的、不可靠的。
优点：速度快。
原理：将需要发送的信息封装在数据报（Datagram）,在数据报里指明Socket主机和端口号。然后发送出去。
使用的操作类： 
DatagramPacket 表示数据报包 
DataSocket 用来发送和接收数据报包的套接字
基于UDP协议实现网络通信：
服务器端实现步骤：
1、创建DatagramSocket,指定端口号
2、创建DatagramPacket
3、接收客户端发送的数据信息
4、读取数据

客户端：
1、定义发送信息
2、创建DatagramPacket：包含将要发送信息
3、创建DatagramSocket
4、发送数据

UDP编程-服务器向客户端响应数据（与客户端向服务器发送数据类似）
1、定义客户端的地址、端口号、数据。通过DatagramPacket的.getAddress()方法获取客户端的地址，通过.getPort()方法获取端口号。
2、创建数据报DatagramPacket，包含响应的数据信息。
3、响应客户端。调用DatagramSocket的.send()方法。
4、关闭资源

UDP编程-客户端接受服务器端响应的数据
1、创建数据报DatagramPacket，用于接受服务器端响应的数据。首先创建一个字节数组。
2、接受服务器端响应的数据。调用DatagramPacket的.receive()方法。
3、读取数据。将字节数组转变为字符串。
4、关闭资源



--------
总结：
对于同一个socket，如果关闭了输出流，则与该输出流关联的socket也会关闭，所以一般不用关闭流，直接关闭socket即可。
